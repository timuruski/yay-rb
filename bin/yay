#!/usr/bin/env ruby

require "psych"
require "optparse"

at_exit do
  Yay::Command.new.run
end

module Yay
  BOLD_RED = "\e[1m\e[38;5;1m"
  RESET = "\e[0m"

  class Command
    def initialize(args = ARGV)
      parser = OptionParser.new do |parser|
        parser.on("-i", "--ignore-case") { |value| @ignore_case = value }
        parser.on("-p", "--search-path") { |value| @match_path = value }
      end

      parser.banner = "Usage yay [options] <search pattern> <input>"
      if args.empty?
        abort parser.help
      else
        parser.parse!
      end

      # Parse out search terms before ARGF is used for input.
      search_words = ARGV.take_while { |w| !File.exists?(w) }
      args.slice!(0, search_words.length)

      @search_pattern = search_words.join(" ")
    end

    def run
      if ARGV.empty?
        parse_yaml($stdin, "stdin")
      else
        ARGV.each do |filename|
          File.open(filename) do |input|
            parse_yaml(input, filename)
          end
        end
      end
    end

    private def parse_yaml(input, filename)
      handler = YayHandler.new(@search_pattern, @match_path, @ignore_case, filename)
      Psych::Parser.new(handler).parse(input)
    end
  end

  class YayHandler < Psych::Handler
    # States:
    # a -> start_map -> b
    # b -> scalar -> c (push key)
    # b -> end_map -> b (pop key)
    # c -> scalar -> b (pop key, handle value)
    # c -> start_map -> b (push key)
    # c -> end_map -> b (pop key)

    def initialize(search_pattern, match_path, ignore_case, filename, *args)
      @debug = ENV["DEBUG"]
      @search_pattern = search_pattern
      @ignore_case = ignore_case
      @match_path = match_path
      @filename = filename
    end

    def start_document(*args)
      debug "--> Start document #{@filename}"

      @state = :a
      @prev = nil
      @keys = []
      @line = 0
      @col = 0
    end

    def start_mapping(*args)
      transition("start map") do
        case @state
        when :a, :c
          @state = :b
        else
          panic("start_mapping")
        end
      end
    end

    def end_mapping
      transition("end map") do
        case @state
        when :b, :c
          @state = :b
          @keys.pop
        else
          panic("end_mapping")
        end
      end
    end

    def scalar(value, *args)
      transition("scalar") do
        case @state
        when :b
          @state = :c
          @keys.push(value)
        when :c
          @state = :b
          handle_leaf(value)
          @keys.pop
        else
          panic("scalar")
        end
      end
    end

    def event_location(start_line, start_column, end_line, end_column)
      @line = start_line + 1
      @col = start_column + 1
    end

    private def handle_leaf(value)
      path = @keys.join(".")

      if @match_path
        if path[@search_pattern]
          path.sub!(@search_pattern, "#{BOLD_RED}#{@search_pattern}#{RESET}")
          puts "#{path}:#{@line}: #{value}"
        end
      elsif @ignore_case
        # TODO Clean this up, it's gross.
        if index = value.downcase.index(@search_pattern.downcase)
          match = value[index, @search_pattern.length]
          value[index, @search_pattern.length] = "#{BOLD_RED}#{match}#{RESET}"
          puts "#{path}:#{@line}: #{value}"
        end
      else
        if value[@search_pattern]
          match_value = value.sub(@search_pattern, "#{BOLD_RED}#{@search_pattern}#{RESET}")
          puts "#{path}:#{@line}: #{match_value}"
        end
      end
    end

    private def transition(event)
      @prev = @state
      yield
      # debug "#@prev -> (#{event}) -> #@state"
    end

    private def debug(msg)
      warn msg if @debug
    end

    private def panic(event)
      fail "Failed to parse #{event} at #{ARGF.path}:#{@line}:#{@col}"
    end
  end
end
