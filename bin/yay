#!/usr/bin/env ruby

require "psych"

at_exit do
  abort "Usage: yay <search pattern> <input>" if ARGV.length < 1

  search_pattern = ARGV.shift
  Yay::Command.new(search_pattern, ARGF).run
end

module Yay
  class Command
    def initialize(search_pattern, input)
      @search_pattern = search_pattern
      @input = input
    end

    def run
      handler = YayHandler.new(@search_pattern)
      parser = Psych::Parser.new(handler)
      handler.parser = parser
      parser.parse(@input)
    end
  end

  class YayHandler < Psych::Handler
    # States:
    # a -> start_map -> b
    # b -> scalar -> c (push key)
    # b -> end_map -> b (pop key)
    # c -> scalar -> b (push value, pop key)
    # c -> start_map -> b (push map)
    # c -> end_map -> b (pop key)

    attr_accessor :parser

    def initialize(search_pattern, *args)
      @debug = ENV["DEBUG"]
      @search_pattern = search_pattern
      @state = :a
      @prev = nil
      @keys = []
    end

    def start_mapping(*args)
      transition("start map") do
        case @state
        when :a, :c
          @state = :b
        else
          fail
        end
      end
    end

    def end_mapping
      transition("end map") do
        case @state
        when :b, :c
          @state = :b
          @keys.pop
        else
          fail
        end
      end
    end

    def scalar(value, *args)
      transition("scalar") do
        case @state
        when :b
          @state = :c
          @keys << value
        when :c
          @state = :b
          handle_leaf(value)
          @keys.pop
        else
          fail
        end
      end
    end

    private def handle_leaf(value)
      path = @keys.join(".")
      if path.end_with?(@search_pattern)
        puts "#{path}:#{line_num}: #{value}"
      end
    end

    private def line_num
      parser.mark.line + 1
    end

    private def transition(event)
      @prev = @state
      yield
      puts "#@prev -> (#{event}) -> #@state" if @debug
    end
  end
end
